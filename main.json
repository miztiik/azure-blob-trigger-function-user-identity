{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "4735713249366447260"
    }
  },
  "parameters": {
    "deploymentParams": {
      "type": "object"
    },
    "storageAccountParams": {
      "type": "object"
    },
    "logAnalyticsWorkspaceParams": {
      "type": "object"
    },
    "funcParams": {
      "type": "object"
    },
    "cosmosDbParams": {
      "type": "object"
    },
    "brandTags": {
      "type": "object"
    },
    "dateNow": {
      "type": "string",
      "defaultValue": "[utcNow('yyyy-MM-dd-hh-mm')]"
    },
    "tags": {
      "type": "object",
      "defaultValue": "[union(parameters('brandTags'), createObject('last_deployed', parameters('dateNow')))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "logAnalyticsWorkspaceParams": {
            "value": "[parameters('logAnalyticsWorkspaceParams')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "3468802420156763327"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "logAnalyticsWorkspaceParams": {
              "type": "object"
            },
            "tags": {
              "type": "object",
              "defaultValue": "[resourceGroup().tags]"
            }
          },
          "resources": [
            {
              "condition": "[equals(parameters('logAnalyticsWorkspaceParams').commitTier, false())]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "properties": {
                "retentionInDays": "[parameters('logAnalyticsWorkspaceParams').retentionInDays]",
                "sku": {
                  "name": "PerGB2018"
                },
                "workspaceCapping": {
                  "dailyQuotaGb": "[parameters('logAnalyticsWorkspaceParams').dailyQuotaGb]"
                },
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            },
            {
              "condition": "[equals(parameters('logAnalyticsWorkspaceParams').commitTier, true())]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[format('{0}-commitTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "CapacityReservation",
                  "capacityReservationLevel": 100
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/tables",
              "apiVersion": "2022-10-01",
              "name": "[format('{0}/{1}', format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness), format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').storeEventsCustomTableName, parameters('deploymentParams').global_uniqueness))]",
              "properties": {
                "plan": "Analytics",
                "retentionInDays": -1,
                "schema": {
                  "description": "Store order events custom table",
                  "displayName": "DOESNT-SEEM-TO-WORK-STORE-EVENTS",
                  "name": "[format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').storeEventsCustomTableName, parameters('deploymentParams').global_uniqueness)]",
                  "columns": [
                    {
                      "name": "TimeGenerated",
                      "type": "datetime"
                    },
                    {
                      "name": "RawData",
                      "type": "string"
                    },
                    {
                      "name": "request_id",
                      "type": "string"
                    },
                    {
                      "name": "event_type",
                      "type": "string"
                    },
                    {
                      "name": "store_id",
                      "displayName": "store_id",
                      "description": "The Id of the store placing the Order",
                      "type": "int"
                    },
                    {
                      "name": "cust_id",
                      "type": "int"
                    },
                    {
                      "name": "category",
                      "type": "string"
                    },
                    {
                      "name": "sku",
                      "type": "int"
                    },
                    {
                      "name": "price",
                      "type": "real"
                    },
                    {
                      "name": "qty",
                      "type": "int"
                    },
                    {
                      "name": "discount",
                      "type": "real"
                    },
                    {
                      "name": "gift_wrap",
                      "type": "boolean"
                    },
                    {
                      "name": "variant",
                      "description": "Product Variety",
                      "type": "string"
                    },
                    {
                      "name": "priority_shipping",
                      "description": "Priority Shipping requested",
                      "type": "boolean"
                    },
                    {
                      "name": "contact_me",
                      "description": "Miztiik Automation Brand Experience Store",
                      "displayName": "contact_me",
                      "type": "string"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/tables",
              "apiVersion": "2022-10-01",
              "name": "[format('{0}/{1}', format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness), format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').automationEventsCustomTableName, parameters('deploymentParams').global_uniqueness))]",
              "properties": {
                "plan": "Analytics",
                "retentionInDays": -1,
                "schema": {
                  "description": "Miztiik Automation Events",
                  "displayName": "DOESNT-SEEM-TO-WORK-AUTOMATION-EVENTS",
                  "name": "[format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').automationEventsCustomTableName, parameters('deploymentParams').global_uniqueness)]",
                  "columns": [
                    {
                      "name": "TimeGenerated",
                      "type": "datetime"
                    },
                    {
                      "name": "RawData",
                      "type": "string"
                    },
                    {
                      "name": "request_id",
                      "type": "string"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]"
              ]
            }
          ],
          "outputs": {
            "logAnalyticsPayGWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]"
            },
            "logAnalyticsPayGWorkspaceName": {
              "type": "string",
              "value": "[format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)]"
            },
            "logAnalyticsCommitTierWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-commitTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]"
            },
            "storeEventsCustomTableNamePrefix": {
              "type": "string",
              "value": "[format('{0}{1}', parameters('logAnalyticsWorkspaceParams').storeEventsCustomTableName, parameters('deploymentParams').global_uniqueness)]"
            },
            "storeEventsCustomTableName": {
              "type": "string",
              "value": "[format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').storeEventsCustomTableName, parameters('deploymentParams').global_uniqueness)]"
            },
            "automationEventsCustomTableNamePrefix": {
              "type": "string",
              "value": "[format('{0}{1}', parameters('logAnalyticsWorkspaceParams').automationEventsCustomTableName, parameters('deploymentParams').global_uniqueness)]"
            },
            "automationEventsCustomTableName": {
              "type": "string",
              "value": "[format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').automationEventsCustomTableName, parameters('deploymentParams').global_uniqueness)]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "storageAccountParams": {
            "value": "[parameters('storageAccountParams')]"
          },
          "funcParams": {
            "value": "[parameters('funcParams')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "15239223102838147513"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "storageAccountParams": {
              "type": "object"
            },
            "funcParams": {
              "type": "object"
            },
            "tags": {
              "type": "object",
              "defaultValue": "[resourceGroup().tags]"
            }
          },
          "variables": {
            "uniqStr": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
            "saName": "[format('{0}{1}{2}', parameters('storageAccountParams').storageAccountNamePrefix, variables('uniqStr'), parameters('deploymentParams').global_uniqueness)]",
            "uniqStr_1": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
            "saName_1": "[format('{0}{1}{2}', parameters('funcParams').funcStorageAccountNamePrefix, variables('uniqStr_1'), parameters('deploymentParams').global_uniqueness)]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-05-01",
              "name": "[variables('saName')]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[format('{0}', parameters('storageAccountParams').fault_tolerant_sku)]"
              },
              "kind": "[format('{0}', parameters('storageAccountParams').kind)]",
              "properties": {
                "minimumTlsVersion": "[format('{0}', parameters('storageAccountParams').minimumTlsVersion)]",
                "allowBlobPublicAccess": "[parameters('storageAccountParams').allowBlobPublicAccess]",
                "defaultToOAuthAuthentication": true,
                "supportsHttpsTrafficOnly": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Allow"
                },
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-05-01",
              "name": "[variables('saName_1')]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[format('{0}', parameters('storageAccountParams').fault_tolerant_sku)]"
              },
              "kind": "[format('{0}', parameters('storageAccountParams').kind)]",
              "properties": {
                "minimumTlsVersion": "[format('{0}', parameters('storageAccountParams').minimumTlsVersion)]",
                "allowBlobPublicAccess": "[parameters('storageAccountParams').allowBlobPublicAccess]",
                "defaultToOAuthAuthentication": true,
                "supportsHttpsTrafficOnly": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Allow"
                },
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
              }
            }
          ],
          "outputs": {
            "saName": {
              "type": "string",
              "value": "[variables('saName')]"
            },
            "saPrimaryEndpointsBlob": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('saName')), '2022-05-01').primaryEndpoints.blob]"
            },
            "saPrimaryEndpoints": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('saName')), '2022-05-01').primaryEndpoints]"
            },
            "saName_1": {
              "type": "string",
              "value": "[variables('saName_1')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_Blob', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "storageAccountParams": {
            "value": "[parameters('storageAccountParams')]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.saName.value]"
          },
          "storageAccountName_1": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.saName_1.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.logAnalyticsPayGWorkspaceId.value]"
          },
          "enableDiagnostics": {
            "value": false
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "2406086067718319284"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "storageAccountParams": {
              "type": "object"
            },
            "storageAccountName": {
              "type": "string"
            },
            "enableDiagnostics": {
              "type": "bool",
              "defaultValue": false
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            },
            "storageAccountName_1": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                }
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', format('{0}-blob-{1}', parameters('storageAccountParams').blobNamePrefix, parameters('deploymentParams').global_uniqueness))]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "condition": "[parameters('enableDiagnostics')]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[format('{0}-Diaglogs', parameters('storageAccountName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "StorageWrite",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName_1'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                }
              }
            }
          ],
          "outputs": {
            "blobContainerId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', format('{0}-blob-{1}', parameters('storageAccountParams').blobNamePrefix, parameters('deploymentParams').global_uniqueness))]"
            },
            "blobContainerName": {
              "type": "string",
              "value": "[format('{0}-blob-{1}', parameters('storageAccountParams').blobNamePrefix, parameters('deploymentParams').global_uniqueness)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_cosmosdb', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "cosmosDbParams": {
            "value": "[parameters('cosmosDbParams')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "1374286974622140647"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "tags": {
              "type": "object",
              "defaultValue": "[resourceGroup().tags]"
            },
            "cosmosDbParams": {
              "type": "object"
            }
          },
          "variables": {
            "databaseName": "[format('{0}-db-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)]",
            "containerName": "[format('{0}-container-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)]"
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2022-08-15",
              "name": "[format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "kind": "GlobalDocumentDB",
              "tags": "[parameters('tags')]",
              "properties": {
                "publicNetworkAccess": "Enabled",
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": true,
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[parameters('deploymentParams').location]",
                    "isZoneRedundant": false
                  }
                ],
                "backupPolicy": {
                  "type": "Continuous"
                },
                "capabilities": [
                  {
                    "name": "EnableServerless"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2021-06-15",
              "name": "[format('{0}/{1}', format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness), variables('databaseName'))]",
              "properties": {
                "resource": {
                  "id": "[variables('databaseName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2022-08-15",
              "name": "[format('{0}/{1}/{2}', format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness), variables('databaseName'), variables('containerName'))]",
              "properties": {
                "resource": {
                  "id": "[variables('containerName')]",
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ],
                    "kind": "Hash"
                  },
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/_etag/?"
                      }
                    ]
                  },
                  "conflictResolutionPolicy": {
                    "mode": "LastWriterWins",
                    "conflictResolutionPath": "/_ts"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness), variables('databaseName'))]"
              ]
            }
          ],
          "outputs": {
            "cosmosDbAccountName": {
              "type": "string",
              "value": "[format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)]"
            },
            "cosmosDbName": {
              "type": "string",
              "value": "[variables('databaseName')]"
            },
            "cosmosDbContainerName": {
              "type": "string",
              "value": "[variables('containerName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_FnApp', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "funcParams": {
            "value": "[parameters('funcParams')]"
          },
          "funcSaName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.saName_1.value]"
          },
          "saName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.saName.value]"
          },
          "blobContainerName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Blob', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.blobContainerName.value]"
          },
          "cosmosDbAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_cosmosdb', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.cosmosDbAccountName.value]"
          },
          "cosmosDbName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_cosmosdb', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.cosmosDbName.value]"
          },
          "cosmosDbContainerName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_cosmosdb', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.cosmosDbContainerName.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.logAnalyticsPayGWorkspaceId.value]"
          },
          "enableDiagnostics": {
            "value": true
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "3659972469704249631"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "funcParams": {
              "type": "object"
            },
            "tags": {
              "type": "object"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            },
            "enableDiagnostics": {
              "type": "bool",
              "defaultValue": true
            },
            "saName": {
              "type": "string"
            },
            "funcSaName": {
              "type": "string"
            },
            "blobContainerName": {
              "type": "string"
            },
            "cosmosDbAccountName": {
              "type": "string"
            },
            "cosmosDbName": {
              "type": "string"
            },
            "cosmosDbContainerName": {
              "type": "string"
            },
            "blobOwnerRoleId": {
              "type": "string",
              "defaultValue": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
            }
          },
          "variables": {
            "$fxv#0": "import logging\nimport json\nimport datetime\nimport os\nimport random\nimport uuid\n\nfrom azure.cosmos import CosmosClient\nfrom azure.identity import DefaultAzureCredential\n\nimport azure.functions as func\n\ndef main(event: func.EventGridEvent, miztProc: func.InputStream, outputBlob: func.Out[str], context: func.Context) -> None:\n    get_req_body = None\n    body_blob_name = None\n    recv_blob_name = None\n    DB_CREDENTIAL = DefaultAzureCredential()\n    COSMOS_DB_URL = os.getenv(\"COSMOS_DB_URL\").rstrip('/')\n    COSMOS_DB_NAME = os.getenv(\"COSMOS_DB_NAME\", \"store-backend-db-006\")\n    COSMOS_DB_CONTAINER_NAME =os.getenv(\"COSMOS_DB_CONTAINER_NAME\", \"store-backend-container-006\")\n    # COSMOS_DB_KEY = os.getenv(\"COSMOS_DB_KEY\")\n\n    try:\n        cosmos_client = CosmosClient(url=COSMOS_DB_URL, credential=DB_CREDENTIAL)\n        db_client = cosmos_client.get_database_client(COSMOS_DB_NAME)\n        db_container = db_client.get_container_client(COSMOS_DB_CONTAINER_NAME)\n        # db_container.create_item(body={'id': str(random.randrange(100000000)), 'ts': str(datetime.datetime.now())})\n    except Exception as e:\n        logging.error('CosmosDB database or container does not exist')\n        logging.exception(f\"ERROR:{str(e)}\")\n\n    _d={}\n    try:\n        result = {\n            \"id\": event.id,\n            \"data\": event.get_json(),\n            \"topic\": event.topic,\n            \"subject\": event.subject,\n            \"event_type\": event.event_type,\n        }\n\n        logging.info(f\"Python EventGrid trigger processed an event: {json.dumps(result)}\" )\n    \n        # query_blob_name = req.params.get(\"blob_name\") # For query string\n        # # For blob_name in body\n        # get_req_body = req.get_json()\n        # body_blob_name = get_req_body.get(\"blob_name\")\n\n        # if query_blob_name:\n        #     recv_blob_name = query_blob_name\n        # elif body_blob_name:\n        #     recv_blob_name = body_blob_name\n\n        # logging.info(f\" Received Blob Name: {recv_blob_name}\")\n        _d = miztProc.read().decode(\"utf-8\")\n        _d = json.loads(_d)\n        blob_url = result['data']['url']\n        blob_name = blob_url.split('/')[-1]\n        _d[\"blob_name\"] = blob_name\n        _d[\"miztiik_event_processed\"] = True\n        _d[\"last_processed_on\"] = datetime.datetime.now().isoformat()\n        logging.info(f\"BLOB DATA: {json.dumps(_d)}\")\n        outputBlob.set(str(_d)) # Imperative to type cast to str\n        logging.info(f\"Uploaded to blob storage\")\n\n        db_container.create_item(body={\"id\": str(uuid.uuid4()), \"ts\": str(datetime.datetime.now()), \"blob_data\": json.dumps(_d) })\n        logging.info('injest success success')\n\n    except Exception as e:\n        logging.exception(f\"ERROR:{str(e)}\")\n\n",
            "storageBlobDataContributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
            "blobPermsConditionStr": "[format('((!(ActionMatches{{''Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read''}}) AND !(ActionMatches{{''Microsoft.Storage/storageAccounts/blobServices/containers/blobs/write''}}) ) OR (@Resource[Microsoft.Storage/storageAccounts/blobServices/containers:name] StringEquals ''{0}''))', parameters('blobContainerName'))]",
            "cosmosDbDataContributorRoleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('cosmosDbAccountName'), '00000000-0000-0000-0000-000000000002')]"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}-fnPlan-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "kind": "linux",
              "sku": {
                "name": "[parameters('funcParams').skuName]",
                "tier": "[parameters('funcParams').funcHostingPlanTier]",
                "family": "Y"
              },
              "properties": {
                "reserved": true
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "kind": "functionapp,linux",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)))]": {}
                }
              },
              "properties": {
                "enabled": true,
                "reserved": true,
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-fnPlan-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness))]",
                "clientAffinityEnabled": true,
                "httpsOnly": true,
                "siteConfig": {
                  "linuxFxVersion": "Python|3.10",
                  "ftpsState": "Disabled",
                  "minTlsVersion": "1.2"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', format('{0}-fnAppInsights-{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness))]",
                "[resourceId('Microsoft.Web/serverfarms', format('{0}-fnPlan-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness), 'appsettings')]",
              "properties": {
                "AzureWebJobsStorage": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('funcSaName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('funcSaName')), '2021-06-01').keys[0].value)]",
                "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('funcSaName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('funcSaName')), '2021-06-01').keys[0].value)]",
                "WEBSITE_CONTENTSHARE": "[toLower(parameters('funcParams').funcNamePrefix)]",
                "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', format('{0}-fnAppInsights-{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)), '2020-02-02').InstrumentationKey]",
                "FUNCTIONS_WORKER_RUNTIME": "python",
                "FUNCTIONS_EXTENSION_VERSION": "~4",
                "AZURE_CLIENT_ID": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)), '2023-01-31').clientId]",
                "AZURE_TENANT_ID": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)), '2023-01-31').tenantId]",
                "WAREHOUSE_STORAGE": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('saName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('saName')), '2021-06-01').keys[0].value)]",
                "WAREHOUSE_STORAGE_CONTAINER": "[parameters('blobContainerName')]",
                "SUBSCRIPTION_ID": "[subscription().subscriptionId]",
                "RESOURCE_GROUP": "[resourceGroup().name]",
                "COSMOS_DB_URL": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName')), '2022-08-15').documentEndpoint]",
                "COSMOS_DB_NAME": "[parameters('cosmosDbName')]",
                "COSMOS_DB_CONTAINER_NAME": "[parameters('cosmosDbContainerName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', format('{0}-fnAppInsights-{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness))]",
                "[resourceId('Microsoft.Web/sites', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness), 'logs')]",
              "properties": {
                "applicationLogs": {
                  "azureBlobStorage": {
                    "level": "Error",
                    "retentionInDays": 10
                  }
                },
                "httpLogs": {
                  "fileSystem": {
                    "retentionInMb": 100,
                    "enabled": true
                  }
                },
                "detailedErrorMessages": {
                  "enabled": true
                },
                "failedRequestsTracing": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness))]",
                "[resourceId('Microsoft.Web/sites/config', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness), 'appsettings')]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/functions",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness), format('{0}-consumer-fn', parameters('funcParams').funcNamePrefix))]",
              "properties": {
                "invoke_url_template": "[format('https://{0}.azurewebsites.net/api/sayhi', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness))]",
                "test_data": "{\"method\":\"get\",\"queryStringParams\":[{\"name\":\"miztiik-automation\",\"value\":\"yes\"}],\"headers\":[],\"body\":{\"body\":\"\"}}",
                "config": {
                  "disabled": false,
                  "bindings": [
                    {
                      "name": "miztProc",
                      "type": "blob",
                      "direction": "in",
                      "path": "{data.url}",
                      "connection": "WAREHOUSE_STORAGE"
                    },
                    {
                      "type": "eventGridTrigger",
                      "name": "event",
                      "direction": "in"
                    },
                    {
                      "type": "blob",
                      "direction": "out",
                      "name": "outputBlob",
                      "path": "[format('{0}/processed/{{DateTime}}_{{data.eTag}}.json', parameters('blobContainerName'))]",
                      "connection": "WAREHOUSE_STORAGE"
                    }
                  ]
                },
                "files": {
                  "__init__.py": "[variables('$fxv#0')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness))]",
                "[resourceId('Microsoft.Web/sites/config', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness), 'appsettings')]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/default/{1}', parameters('saName'), parameters('blobContainerName')), '/')[0], split(format('{0}/default/{1}', parameters('saName'), parameters('blobContainerName')), '/')[1], split(format('{0}/default/{1}', parameters('saName'), parameters('blobContainerName')), '/')[2])]",
              "name": "[guid('r_storageBlobDataContributorRoleAssignment', resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', parameters('saName'), parameters('blobContainerName')), '/')[0], split(format('{0}/default/{1}', parameters('saName'), parameters('blobContainerName')), '/')[1], split(format('{0}/default/{1}', parameters('saName'), parameters('blobContainerName')), '/')[2]), variables('storageBlobDataContributorRoleDefinitionId'))]",
              "properties": {
                "roleDefinitionId": "[variables('storageBlobDataContributorRoleDefinitionId')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/default/{1}', parameters('saName'), parameters('blobContainerName')), '/')[0], split(format('{0}/default/{1}', parameters('saName'), parameters('blobContainerName')), '/')[1], split(format('{0}/default/{1}', parameters('saName'), parameters('blobContainerName')), '/')[2])]",
              "name": "[guid('r_attachBlobOwnerPermsToRole', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)), parameters('blobOwnerRoleId'))]",
              "properties": {
                "description": "Blob Owner Permission to ResourceGroup scope",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('blobOwnerRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)), '2023-01-31').principalId]",
                "conditionVersion": "2.0",
                "condition": "[variables('blobPermsConditionStr')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', parameters('cosmosDbAccountName'), guid('r_cosmodb_customRole', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))))]",
              "properties": {
                "roleName": "Miztiik Custom Role to read w Cosmos DB1",
                "type": "CustomRole",
                "assignableScopes": [
                  "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
                ],
                "permissions": [
                  {
                    "dataActions": [
                      "Microsoft.DocumentDB/databaseAccounts/readMetadata",
                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/*",
                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/*",
                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/executeQuery",
                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/readChangeFeed",
                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/executeStoredProcedure",
                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/manageConflicts"
                    ]
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2021-04-15",
              "name": "[format('{0}/{1}', parameters('cosmosDbAccountName'), guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName')), variables('cosmosDbDataContributorRoleDefinitionId'), resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))))]",
              "properties": {
                "roleDefinitionId": "[variables('cosmosDbDataContributorRoleDefinitionId')]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)), '2023-01-31').principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_identity_{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/hostNameBindings",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness), format('{0}.azurewebsites.net', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness)))]",
              "properties": {
                "siteName": "[format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness)]",
                "hostNameType": "Verified"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[format('{0}-fnAppInsights-{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "Request_Source": "rest",
                "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            },
            {
              "condition": "[parameters('enableDiagnostics')]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness))]",
              "name": "[format('{0}-logs-{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "FunctionAppLogs",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            }
          ],
          "outputs": {
            "fnAppName": {
              "type": "string",
              "value": "[format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness)]"
            },
            "fnAppUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness)), '2021-03-01').defaultHostName]"
            },
            "fnUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', format('{0}-fnApp-{1}', parameters('funcParams').funcAppPrefix, parameters('deploymentParams').global_uniqueness)), '2021-03-01').defaultHostName]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Blob', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_cosmosdb', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_event_grid_system_topic', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "saName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.saName.value]"
          },
          "blobContainerName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Blob', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.blobContainerName.value]"
          },
          "funcParams": {
            "value": "[parameters('funcParams')]"
          },
          "funcAppName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_FnApp', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.fnAppName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "659102008865558839"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "funcParams": {
              "type": "object"
            },
            "funcAppName": {
              "type": "string"
            },
            "saName": {
              "type": "string"
            },
            "blobContainerName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": "[resourceGroup().tags]"
            }
          },
          "variables": {
            "funcName": "[format('{0}-consumer-fn', parameters('funcParams').funcNamePrefix)]"
          },
          "resources": [
            {
              "type": "Microsoft.EventGrid/systemTopics",
              "apiVersion": "2022-06-15",
              "name": "[format('{0}-eventGrid-Topic-{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "None"
              },
              "properties": {
                "source": "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]",
                "topicType": "microsoft.storage.storageaccounts"
              }
            },
            {
              "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
              "apiVersion": "2022-06-15",
              "name": "[format('{0}/{1}', format('{0}-eventGrid-Topic-{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness), format('{0}-blob-events-subscription-{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness))]",
              "properties": {
                "eventDeliverySchema": "CloudEventSchemaV1_0",
                "destination": {
                  "endpointType": "AzureFunction",
                  "properties": {
                    "resourceId": "[resourceId('Microsoft.Web/sites/functions', parameters('funcAppName'), variables('funcName'))]",
                    "maxEventsPerBatch": 1,
                    "preferredBatchSizeInKilobytes": 64
                  }
                },
                "filter": {
                  "subjectBeginsWith": "[format('/blobServices/default/containers/{0}/blobs/source', parameters('blobContainerName'))]",
                  "subjectEndsWith": ".json",
                  "includedEventTypes": [
                    "Microsoft.Storage.BlobCreated"
                  ]
                },
                "retryPolicy": {
                  "maxDeliveryAttempts": 30,
                  "eventTimeToLiveInMinutes": 1440
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventGrid/systemTopics', format('{0}-eventGrid-Topic-{1}', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Blob', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_FnApp', parameters('funcParams').funcNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]"
      ]
    }
  ]
}